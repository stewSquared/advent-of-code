
val input = io.Source.fromResource("2022/day-17.txt").getLines().next()
// input: String = ><<><<<>><<<<><<<>>>><<<<>><<>><>>>><<>>><><<<<>>>><>>><>>>><<<<>><<<>>><<<><<>><<>>><><<><<<>><<<<>><<<<>>>><<<<><<>>><<<><<>>><><>>>><>>><>><>>><<>><<<>><<<>>><<<<>>>><<<<>>><<>>><<>><<<>>><<>><<>>><<<>><><>><<><>>><<>>><<>><<<>>><<<>>><<<>>>><<>>><<<<>>><><<>>>><>>><<<<>>><>>>><<<<>><<<>>>><<<>><<<>>>><<>>><><<<>>><<<<>>>><<<><<<<>><<<<><<<<>>><<<>>>><>><>>><>><<<><><<<><<>><<<<>>>><<><<<<>>>><<<><>>><>><<><<<<>><<>>><<<>>>><<><<>><<<>><><>>><<<>>>><>>><<<<><<<<><<<<>>><<<<>>>><<<>>>><<<<>>><<<>><<>>><>><<<<>>>><<>>><<>>>><<<><<<>><>><<<<>><><>><>>>><<<>>><<<<>>>><<<<>>><<<<><<>>>><<<>>>><<<<>><<<>><>>>><<<>>><<<<>>>><>><<>><<<<>>><<<>>><<<>>>><><<>>>><<<<>><<>><<>>>><<>>><<>>><<<>>>><>>><<<>>><<<<>><>>>><<<<>>>><<<<>>><<<>>><<<>>><<<<><<<>>><><<<<>>><>>><<<<>>>><<<<>><>><<<<>><>>>><<<<>><<><<<><<><<<<><>>>><<>><><<<<><<<<>><>><<>>>><<<<>><>>><>><>><>>><>><<><<<><<<>>>><><>>>><<<>>><<<<>>><>>>><<>><>>><>>>><><<<><<<<>><<<><<<<>>>><<>>><<<><<<>>><<<>>><<<<>><>>>><<<<><<>>><<<><<<<>>>><<<><<<><>>><>><<<><<<>>><<<>>><<<>>>><<<<>><<<>><<<<>>>><<<<><<<><>><<>><>>><<>>>><>><<<>>><<<<>><<<<><>>>><>>><<<><<<<>>>><<>>>><<<>><>>>><<><<<<>>><<>>><<<<><>>>><<>><<><<>><><>><<<<>><<<<>>><<>><<>><>>><>>><<><<<<>><<<>>><>><<>>><<<>>>><<<>><<<<>>>><<<<>>><>>>><<>><><<<>>><<<><<<<><<>>>><<<>><<>>>><<<>>><<<>>><<<<>>>><<<>><<<>><<<>>><<<<>><>>><<>>>><<>>><<<<>>>><<<<>><<>>>><<>>><<><>>>><>><<<<><>>>><>>>><<<>>><><<<<>><>>><>>><<>>>><><><>>><<><<<>>>><<<>><<<<>>><<<<>>>><<<<><<<<>>>><<<>>>><<<<>>>><<<><<><<><<<<><>>><<><<<>><<>><<<>><>>><<<<>>><<<<>>><<<<>><>><><<<<>><<<><<>><><<>>>><>>><<<>>><<<<><<>>>><><<<>>><<>>>><<<<>><<<<>>><<<<>>><<<>>>><>><<>>>><<<><<<<><>><<<><<<<>>><<<><<<>>><<<>>><>>>><<<><>><<<><<><<<>>><<<>><<><<<<><<<>><>>><<<<>>>><>>><<<<>><<<<>>><<><<><<<<>>>><><>>>><<<<><<>>><<>><<<>>>><<>>>><<<>>>><<<><>>><<<<>>>><>>>><<<>>>><<>>>><<<<><<>><>><<>><<<>>><>>><>>><<<>><<<><<>><<>>>><<>>>><<<>>>><>>><>><<<>>>><<>>>><<<><<>>><<><<<>>><>><<<<>>><>>><<<><<>>><<><<<><<<><<<<><<<<>>><<<<>><<>>><<><<>><<><<><<>>><<<>><>>>><<<<>>>><<><<<<>>><>>><<<>><>>>><<<>>>><>>>><<<>><<>><<<<>><<>><<<>>><<<<>>>><<><>>>><<<<><<<>>>><<<<>><<<<>>><><<<>>>><>>><<<<>>><<>>>><<<<>>>><<<<>>>><><<>>>><<<><>>>><<<<>><<<<><<<<>>><<<><<>>><<<>>><><><<<>><<<>><>>>><<<<>><<>>><<<<><>>><<<<>><<>>>><<><<>><<<<><>>><<<<><<<<>><<<<>><<><<<>>>><>>>><<>>><<>><<<<>><<><<><<<>>><<<>>>><<<<><<<>>><>>><<<>><<>>>><<<<>><<<>>><<<>><<<>>><><>>>><>><><<<<><<>>>><<>>><<>><<>>><<<<>><<<<>><><><<>>><<><<>>><<<<>>><>>><<>><<<<><<<>>><>><<<<>>><<>>><<<><<<>><<>>><><<<<>>><<<<>><>>>><>>>><<>>>><<<<>>><>><<<<>>><<>>><<<><>><<>><<<><<<>>><<<<>>><<>>>><>>>><<<<>>>><>>><<<<><<>><><<<>>><<>>>><<<<>>>><<<<>>>><<>><<<<>>>><<>><<><<>><<>>>><>>>><>>><<<>><>><<><<<>><<<><<>>><>>>><<<>>><>>><<<>>>><<<<>><<<><<>><<>><<<<><<>>><<<><<<<>><<<>>>><<<><<>><<<<>>><><<<>>>><<>><<<>>>><<<><<<><<>><>>><<<>>><<>><<<<>>><<<>>>><<>>><>>><<>>>><<<<>><>>>><<<<>><<>>><<>><<<>>><<<>>>><<<><><<<<><>>><<<>>>><<<<>>><<>>>><<>>><<<>>>><<>>>><<>>><>>><<><><<<><<<<>>>><>><>>>><><<<>>>><<<<><<<<><<>><>><<><<<>>>><>>><<<>>><>>>><>>><>>>><><<>>>><>><>><<>><><<<<>>><>>><<<<>>>><<<<><<<>>><<<<><>><>>><<><<<<>>>><<>>><<<<>>>><<<<>>><<>>>><>><<<<>>>><<<><><<<><<<<><><<<>><<>>><<<><<<>>><<<>><>>><><<<<>>>><<<<>>><>>>><>>><<><<<<><<<><<<<>><<<>>>><<<><<<<>>><<<>><<>>>><>>><<>>><<<<>><<>>><<<><>>>><<>>>><>>>><<<<>>><><<<<>><<<>>>><<<<>><<<><<<>>>><>>><<>>><<><<<<>>><>><><<><>>><>>><<<>><>>><<>>>><<>>>><>><><<<<>>>><<>>>><<>>>><<<>>>><<>>>><>>>><<>>>><>><<<>><<<<>>>><<>>>><><>>><<<<><<<<>><<>>><<>><<<<>><>><<>>>><<<>><<<<>>><<><<<><<<>>><<<<>>><<<>><>><<<<>>>><>><<<<>>><><<<>>>><>>><<<<>><>><<>>>><>>><<<<>>><<<>>>><<<>><<<<>>>><>>><>>>><<><<<>>><<<<>>>><<<>>><<<>><>><>>>><<<>>>><><<><>>><<<>><<><<<>><<<<>>><<>><>>><<<<><<<<><<<<>>><<<<>><><<<<>>><<><><<>>>><<<><><<>>>><<>>>><<<><>>>><<<<>>>><>>><<<>>>><<<<><<<>><<<<>>>><<>>><<<><<<<>>>><<>><>>>><<<<><>>>><<>>>><<<>><<>>><>>><<>>><<<<>>>><<>>>><<<<>>>><<>>><<<>><>><>>><<<><<<<>><<<>><>><<<>>><><<>><<<<>><<<<>>><<<>>><<<<>><><<<<>>><<<><<<>>>><><<<><<<<>>>><<><<<<><<><<<<>>>><><<<>><<<<>>>><<><><<>>>><>><<>>>><<>>>><<<<>>><><><><>>>><<>><>>><<>><<>><>>><<>>>><<<>>>><<<><<<>>><<<<>>>><<<<>>>><<>><<<<>><<<<><<<<>>>><<><<>>>><>>>><>>>><<<<><<<<>>><<<<>><<<>><<><<<><<<<><<<><><<>><><<<>><<<>>><<<<>><<<>>><><<<<>><<<><<>><<<>>>><<<>>>><>><><<>><>>><<>>>><<>>><>>>><<>>><<<>>>><>>>><>>><<<<><<>>><>><>>>><<<>>>><<<><>>><<><<>>>><<<>>>><<<>>><<>>><>>>><<>>>><<<<>>><<<<><><<>>>><<<<>><<<<>>>><>>><>>>><<<>><><<<><<>><<<>><<<>>>><<<<><>>><<<<>>>><<<<>>><<<>>>><<<<>>><>><<<<>>><<<<>>><<<<>><<<<><<>><<>><><<<>>><<<<>><>>>><<><>>><<>>>><>>><<<>><<<<>>><<<>>><<<<>>>><<<>>>><<<<>>><<<>>>><<<<>>>><>>><>>><<<<>>>><<<>>>><<>>>><<<>>><<<>>>><<><><>>><<><<<><<<<>><<<<>><<>>>><<<<>>>><<<<>>><<<>>><<>>><>><<>><>>><<<>>>><<>>>><<<><<>><<><><<<><<<<>><<><><<>>><<><<<><<<<>>><<<>><<<<>><<>><<<>><>>>><>><<<<><<<<>>>><<<>>><>>>><<<<>>>><<>>>><<<<><<<>>><>>><<>>><>>><<<<>><>>><<<>>>><<>><<<<>>>><<><<<<>>><<>>>><<>>>><<<>>>><<<>>>><<><>>><<<>>>><<>>><>>><<>><<<>>>><>>><>>>><<<<>>>><<>><<>>>><<<<>><<<<>>>><<<>><<><<>>><<<><<>><><<<<>>>><<<<><<<<>><><<<<>>><<<<>>><<<><<>>>><<><<<>>><>>><<>>><<<<>>>><<>>><<><<<<>>>><<<<>><<<><<>>>><<<>>>><<<><<<>><<<<>>>><>>>><<><>><<>>>><<<>><<<<>>><<<>>>><<<>>><<<<><<<>><<>><<<><<>><<>><<<>>><>><<>><<><<<>>><<>><<<>><<><<<<>><<>><<<><<<<>><>><<<<><<<<>>>><<>><<<>>><<>>><<>>><<>>>><<>>><<>>>><<<<>>><><<<<>>><<<>>><<>>><>>>><<<<>><<>><<<<><>>><<><<<<>>>><>><<>><>>><<<>><<>>>><<<<><>><<><<<<>>>><<<<>>><<>><<>><<<<><<<<>><<<<><<<<>><>><<<<><<><<<<>><<>>>><<<<><<<>>><<<><<<>>>><<><<>><<><<><<<<>>><<<>><<><<<<>><<>><<<>>>><<<>>>><<<<>>><<<>>><<<<><<<><<<<><<<><<<>>>><><<<<><>><<<<><<<><><<<>><<<>>><<<>><<<>><<<<>><<>><<<<>>><<<<>><<<<>>><<>><<<<>><<<>><<<><<>><<>>>><<<>>><<<><<>>>><<<<>>>><<><<<>>>><<<><<<>>><<>>><<<<>>>><>>>><<><><>>><<>>>><<<>>><<<<><<<>>><>>>><>>><<<>><<><<<<>>><<>>><<<>>>><<<>>>><<>>><<>>>><<<<>>>><<<><>>>><>><<<>>>><><>><<><<<><<<>>>><><<<<>>><<>>><>>><><<>><<<>><>>>><>><>>>><<<<>>><><<<<>>><>><<<>>><<<<>>>><<<<>>>><>><<<<>><<>>>><<<>>><<<><<<>>>><<><<<>>><<<<>>>><<>><<>><<<<>><<<><<>>><<><>>><<>>><>><<<>>><<<<>>><>><<<<>>>><<<>><<><<<<>><<<>>>><<<<>>><<<>>><<<<>><<>><>>><<<<>>><<<<>>>><>>><><<><<<><>>><<>>><<><>>>><>><>><<<><<><>><>><>>>><<>><>>><<<>><<<><>><>>><>>><<<>>><<<<>>><<<<>><<<<>>>><<>><<<<>>><>>>><<<>>>><>>>><>><<<>>><<>>><>>>><<<><<>>>><<>>>><<<>>><<<>><>>><<<<>>><<<><<<>>>><<<>>><<>>><><<<<>>><<>>>><<<<>>>><>><<>><<<>>>><<<>><<<<><<<>>><<<>>><>>>><<<<>>><<<<>><<<>>><>>>><<<>><<>><<<>>>><<>>>><<>>><<<><<<<>><<>><<<<>>>><<<>><<<<><<<<>><<<<>>><>><<<<>>>><<<<>>>><<<<>>>><<<<>>><><<<>>><<<<>>><<<><<<<><>>><<<<>>>><<>><<<<>><<>><>>>><>>>><<<<><>><<>><<>>>><<<<><<<<>><<<<>>><<>>><<>><><<>>><>><>><<<<>><>>>><<<<>>><><<<<>>>><<<>>>><<<>>><>>>><<<><>>><<><<<<>><<>>><>>>><<>>><<<<>><<<<>>><<><<>>>><<>>><<>>><<<<>>>><<<<>>><>>>><<>>>><>><<><<>>><<<><<<<>>>><<>><<>>>><<>>><<<<>>>><<>><<>>>><>><>>><>>><><<><>>>><<><<>>>><<<><<<><<<>>>><<><<<<><<<>>><<<<>><>>><<>>>><>>>><<<<>>>><><<>>>><<<>><<<>><<<<>><<<>><<<>>>><<<>>>><<<>><<>><<<<>>>><<>>>><<>><<<<>><>>><<<<><><>>><>><<<<><<>><<>>><<<><<<<>>><<<<>>><<<<><<>>>><<<>>>><>>>><<>>>><<<>><<<<>>><<<<>>>><>>>><<<>>><<<<>>>><<>>><<>>><><<<>>>><<<<>>><<><<<<>>><<<>>>><>>><<>>>><<<>>>><<><<>><<>><<><>>>><<<>><<<>><<<<>>><<>>>><<<<>><><<>>><><<<<>>><<>>><<<>><>><<<>><<<><<>>>><<>>>><<>><<<>>>><<>>>><<<<><<><<>><<>>><<<><>>>><>>><<<>>>><<>>><>>>><<<<><<<><<>>><<<<>><<>><<<<>><>>>><<<>>>><>>><<<><<<>>>><><<<><>>>><<<><<<><<<<>>><<><<>><>>>><<<<>><<<<><>>>><<<<>>><<<<><<>>>><<<>><<<<>><<<<>><<<<><><>>><<<>>>><<<<><<<<>>>><<<<>>><<<<><<<<><>><>>><<<<><>><>>>><<<<><<>><>>>><>>><<<<>>><>><<<>>>><<>>>><<<<>>><<<>>><>><<>><<<>><<<<>><<<<>>>><<>>><<<><<<<>><>><<>>>><<>><<<>>><<<<>>>><>><>>>><<<><<<><>><<<>>><<<>>>><<><<><<>>>><>><<>>><>>><<<>>>><<>>>><<><<><<<>>>><>><><<><<<<>>><<>>>><<<<>><>><<>>>><<<><<>>><<<>>><>><<<<><<><<>><<>><<<>><<>>>><<<><<<>>><>><<<>>>><<><<<>>>><<>>>><<<>>>><>><>>>><<>><<><<>>>><>><<<<>><>><>>>><<<<>>><>>>><>>><<<<>>><<<<>>>><<<<>>><<<<>>>><<><<>>><<<><<<<><<>><<><><<>>><<<>>><>><<<<>>>><<><><<>>><<>><<<>>>><<<<>><<>><<>>>><<<<>>><<>>><<<><<<<>><<<>>>><<<<>>>><<<><<<<>>>><<<>>><<<><<>>>><><<<>><>>><><>><<<>>><>>><>><><<>>><<<<><<<><<<<>>>><><<>>><>>>><>>><<<><<>>><<<>>>><<<>>>><<<<>><<<<>>>><<<<><>>><<<<>>><<<>>>><>><<<>>>><<<>><<<>><<<<>>>><<<<>><<<>>><>>><<<<>>><><<<>>><>><<>>><<>>>><>><>>>><<<<>><<>>><<><<<>><<<<><>>>><<>>>><<>><<>>>><<>>><<<<>><<<<><<<<><<>>>><<>>><<<<>><<<>>><<>>><<<>>>><<<<>>><<<>>>><<<>><<>>>><<<<>>>><>>>><<<>><<<>>>><<<<>><<>>>><>><<>><<<<>><>>><>>><<<>>>><<<<>><<<>>><<<>><>>><<>>><>>>><<>><>><<>><<>>>><<>><>>>><<<>>><<<<>><>><>>><><<>><><<<<><<>>>><<<>>>><>>>><<<<>><<<><>>><<<>><<<><<<>>><>><><<<<>>>><<<<>>><<<>>><<<>>><>><<<<><<<>><<<<>><><<<>>>><<<>>><<<<><<>>><><<<<><<>>>><<>><<>>><><<>>><<<>>><<<>>><<<>>>><<<>>>><<<><<>><<><<><<<<>><<<<>>>><>>><<<><<<<><<<><<<<>>><<<<>>><<<<><<<>>>><<>>><<<<>>><<><<<>>>><<<<>>>><<>>><<>>><<<<><>>><<<>><<<<><<<<><>>><<>><<<<>>>><>>>><>><<><<<<><<<>><<<<>>><>><>>><>>><<><><>>><<<<>>><<<>>>><<>><><<<<><<<>><>>><<><<<<>><<><><<<>>>><>>>><<<>>><<<>>><<>><<<>>><<<><<<<>><<<>>>><<>><<<<>>>><<<>>><>><<<>>><<<<>><<<>><<<<><<<<><<>>>><<><<<<>>>><<>><<><<<>>><<<<><<<<>>>><<<><<<<>>>><>><<>><<>>><>><<>><<<>><<><>><><><<<<><<>><<<<>><>>><<>><<<>><<<<>>><<<<><<<>><>><<<<>>><<<>>><>>>><<>>><<<<><>><><<>>><<<>><>>>><<<><<<<>>>><<<<><><<<<><<<>><<>>><<<<>>><<<<>>><<<>>><>><<<<>>><<<<>>>><<<<>><<>>><<<<><<>>>><>>>><<<>><<<>>><<>>>><>>><><>>><<<>>>><>>><<><<<>><<<<><<<<>><<<<>>>><<<><<>><<<>>>><<<<>>><<<<>>><<<<>><<<<><<>>>><<<<>>><<<<>><<>><<<<>><<<><<>>><<>>>><<<>><>>>><>>><>><><<<<>><>>><<>><<<<>>><<<>>><<<<><<<><<<<><>><><<<><<<<>>><<><<<>>>><<<>>>><<>>><<<>>><<>>>><<>>>><<<<>>><<<<>>><<><>><>><><<<<>>><<<><<<<>>>><<>>><<<<>><<<><><>>><<<<>><<<<><<<<><<<<>>>><<<<>>>><<<>>>><><>><<<<>>>><<>>>><<<><<>>><<<>>>><>><<<<>><<>>>><>>><<<<>><<<>>>><>>><<<<>><<>><<<><>><<>>>><<>>><><<>>><<<<>>><<<<>><<<><<>><<<><<<>>><<<>><<<<>>>><>>

input.size * 5
// res0: Int = 50455

input.sliding(4).distinct.size
// res1: Int = 16
input.sliding(5).distinct.size
// res2: Int = 30
// ^ all combinations except left five and right five
input.sliding(6).distinct.size
// res3: Int = 58
// ^ only missing combinations that have five in a row

// val input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"

// .#.....
// ###....
// .#.....
// .####..

// ..#....
// .###...
// ..#....
// .####..

// ...#...
// ..###..
// ...#...
// .####..

// ....#..
// ...###.
// ....#..
// .####..

// .....#.
// ....###
// .....#.
// .####..

case class Point(x: Long, y: Long):
  def l = copy(x = x - 1)
  def r = copy(x = x + 1)
  def d = copy(y = y - 1)

enum Shape:
  case Horz, Cross, Angle, Vert, Box

  def start(max: Long): Set[Point] = this match
    case Horz => (2 to 5).map(x => Point(x, max + 4)).toSet
    case Cross =>
      (2 to 4).map(x => Point(x, max + 5)).toSet +
        Point(3, max + 4) + Point(3, max + 6)
    case Angle =>
      (2 to 4).map(x => Point(x, max + 4)).toSet + Point(4, max + 5) + Point(
        4,
        max + 6
      )
    case Vert =>
      ((max + 4) to (max + 7)).map(y => Point(2, y)).toSet
    case Box =>
      Set(
        Point(2, max + 4),
        Point(3, max + 4),
        Point(2, max + 5),
        Point(3, max + 5)
      )

def touching(shape: Set[Point], rocks: Set[Point]) =
  shape.map(_.d).exists(rocks)

def fall(
    shape: Shape,
    rocks: Set[Point],
    jets: LazyList[Char]
): (Set[Point], LazyList[Char], Int) =
  val start = shape.start(rocks.map(_.y).max)

  val positions = Iterator.iterate((start, jets, true)) {
    case (shape, js, false) => (shape, js, false)
    case (shape, js, falling) =>
      val left = shape.map(_.l)
      val right = shape.map(_.r)
      val pushed =
        if js.head == '<' && left.forall(_.x >= 0) && !left.exists(rocks) then
          left
        else if js.head == '>' && right.forall(_.x <= 6) && !right.exists(
            rocks
          )
        then right
        else shape
      val down = pushed.map(_.d)
      val stopped = down.exists(rocks)
      val next = if stopped then pushed else down
      (next, js.tail, !stopped)
  }
  val falls = positions.takeWhile(_._3).size
  val (resting, remainingJets, _) = positions.next()
  (rocks.union(resting), remainingJets, falls)

def shapes: Iterator[Shape] = Iterator.continually(Shape.values).flatten

val floor = (0 until 7).map(x => Point(x, 0)).toSet
// floor: Set[Point] = HashSet(Point(2,0), Point(1,0), Point(6,0), Point(3,0), Point(4,0), Point(0,0), Point(5,0))

println(input.take(10))
// ><<><<<>><

val longIndices = Iterator.iterate(0L)(_ + 1L)
// longIndices: Iterator[Long] = <iterator>

def shapesWithIndices = shapes.zip(longIndices)

def infiniteInput: LazyList[Char] = LazyList.continually(input).flatten
//         1_514_285_714_288
// val n = 1_000_000_000_000L
// val n = 10000
// val n = input.size * 5 // <--- this is key
// val n = 2022
val n = 3000
// n: Int = 3000
input.size
// res5: Int = 10091

1_000_000_000_000L / input.size
// res6: Long = 99098206

def shapesTake(n: Long) = shapesWithIndices.takeWhile(_._2 < n).map(_._1)

// val states =
//   shapesTake2022.scanLeft[(Set[Point], LazyList[Char])](floor, infiniteInput) {
//     case ((rocks, jets), shape) => fall(shape, rocks, jets)
//   }

def states(n: Long) =
  shapesTake(n).scanLeft[(Set[Point], LazyList[Char], Int)](floor, infiniteInput, 0) {
    // case ((rocks, jets), shape) => fall(shape, rocks, jets)
    case ((rocks, jets, used), shape) =>
      val (nextRock, remainingJets, jetsUsed) = fall(shape, rocks, jets)
      (nextRock, remainingJets, jetsUsed + used)
  }

// def jetsUsed = states(2022).map(_._3).sliding(2).collect {
//   case Seq(l, r) => r - l
// }

// def repeated(seq: Vector[Int]): (Int, Int) =
//   // @annotation.tailrec
//   def search(i: Int): (Int, Int) =
//     val hook = seq.slice(i, i + 50)
//     val matchIndex = seq.indexOfSlice(hook)
//     val repeating = seq.slice(matchIndex, i)
//     if matchIndex < i && seq.drop(matchIndex).startsWith(repeating) then
//       matchIndex -> repeating.size
//     else
//       search(i + 1)

//   search(0)

// repeated(jetsUsed.toVector)

// states(2022).toList.last._1.map(_.y).max

// states(2022).toList.last._1.map(_.y).max

// 447 1735
val repeatsStart = 447
// repeatsStart: Int = 447
val repeatSize = 1735
// repeatSize: Int = 1735

// states(447).toList.last._1.map(_.y).max
675
// res7: Int = 675

// states(447 + 1735).toList.last._1.map(_.y).max
val heightAfterFirst = 3456L
// heightAfterFirst: Long = 3456

// states(447 + 1735 * 2).toList.last._1.map(_.y).max
6237
// res8: Int = 6237

// states(447 + 1735 * 3).toList.last._1.map(_.y).max
9018
// res9: Int = 9018

3456 - 675
// res10: Int = 2781
6237 - 3456
// res11: Int = 2781
9018 - 6237
// res12: Int = 2781

val dh = 2781
// dh: Int = 2781
val tril = 1_000_000_000_000L
// tril: Long = 1000000000000

val extra = (tril - repeatsStart) % repeatSize
// extra: Long = 1428
val numRepeats = (tril - repeatsStart) / repeatSize
// numRepeats: Long = 576368875

// states(447).toList.last._1.map(_.y).max
val heightBeforeRepeat = 675L
// heightBeforeRepeat: Long = 675

val repeatHeight = heightAfterFirst - heightBeforeRepeat
// repeatHeight: Long = 2781

states(447 + 1428).toList.last._1.map(_.y).max
val heightWithExtra = 2972
// heightWithExtra: Long = 2398

// states(extra).toList.last._1.map(_.y).max



states(447 + 1073).toList.last._1.map(_.y).max
// res14: Long = 0
// 2393
2393 - 675
// res15: Int = 1718

states(447 + 1735 + 1073).toList.last._1.map(_.y).max
// res16: Long = 2761

(tril - repeatsStart) / repeatSize
// res17: Long = 576368875

// 1602881108 too low
val ans2 =  heightWithExtra + (repeatHeight * numRepeats)
// 1602881844347 <- BINGO
// ans2: Long = 1602881843773

// 1602881843773 still too low


// 1602881801 also too low
// 1514285714288
  // def search(seen: List[Int], remaining: List[Int]): (Int, Int) =
  //   remaining match
  //     case h :: t if seen.contains(h) =>
  //       // val seg = seen.take(seen.indexOf(h) + 1).reverse
  //       val i = seen.indexOfSlice(remaining.take(50).reverse)
  //       val seg = seen.take(seen.indexOfSlice(remaining.take(50)) + 1).reverse
  //       if seg.size >= 50 && remaining.startsWith(seg) then
  //         println(h)
  //         (seq.indexOf(h), seg.size)
  //       else
  //         search(h :: seen, t)
  //     case h :: t => search(h :: seen, t)
  //     case Nil => ???

  // search(seen = Nil, seq)

// jetsUsed.size
// repeated(jetsUsed.toList)

// repeated(List(0,0,0,0,1,2,3,1,2,3))

// repeated(deltaGroups.toList)


// deltaGroups.slice(85, 90)
// deltaGroups.slice(170, 175)

// def cycleSearch[T](elems: Vector[T]): (Int, Int) =
//   var i = 1
//   var j = 2
//   while elems(i) != elems(j) do
//     i += 1
//     j += 2

//   (i, j)

// cycleSearch(deltaGroups)
// 85 170

// val (finalRocks, remainingJets) =
//   val shapesTake2022 = shapesWithIndices.takeWhile(_._2 < n).map(_._1)
//   shapesTake2022.foldLeft[(Set[Point], LazyList[Char])](floor, infiniteInput) {
//     case ((rocks, jets), shape) => fall(shape, rocks, jets)
//   }

// val ans1 = finalRocks.map(_.y).max

// Insights:
// - can step the first four jets at once, then follow normal rules
// - at some point, rock grid gets filled horizontally, and below can be discarded
// - at some point, everything might repeat?
//   1 trillion is large enough we can't actually process that many
//   *have* to find some sort of repeat <--
//   processing a billion shapes per second still is half an hour
// - store shapes as a single point + enum
// - store rocks as a set of shapes

// Types of repeats

// println(remainingJets.take(10))

// show(finalRocks)

def show(rocks: Set[Point]): Unit =
  val xRange = rocks.map(_.x).min to rocks.map(_.x).max
  val yRange = rocks.map(_.y).min to rocks.map(_.y).max

  for y <- yRange.reverse do
    for x <- xRange do
      if rocks(Point(x, y)) then print("\u2588\u2588\u2588\u2588 ")
      else print("     ")
    println()

//
